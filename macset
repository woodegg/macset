#!/bin/sh

# Source rc.common for OpenWrt init.d compatibility (if available)
if [ -f "/etc/rc.common" ]; then
    . /etc/rc.common
fi

# MACSet - MAC Address Set Processor Service for OpenWrt
#
# Author: Jun Zhang
# Version: 1.4.0
# License: MIT
# Date: 2025-07-22

# Service configuration
START=95
STOP=15
USE_PROCD=1

# Service paths
PROG="/usr/bin/macset-processor"
CONFIG_FILE="/etc/macset/config"

# Default configuration
SOURCE_DIR="/etc/macset/sources"
OUTPUT_DIR="/etc/macset/outputs"
MONITOR_INTERVAL=5
FILE_PATTERN="*.txt"
OPERATION_MODE="directory"

# Load configuration if available
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
fi

# Start service
start_service() {
    echo "Starting MACSet..."
    
    # Create directories
    mkdir -p "$SOURCE_DIR" "$OUTPUT_DIR" "/var/log/macset"
    
    # Check if processor exists
    if [ ! -x "$PROG" ]; then
        echo "ERROR: Processor not found at $PROG"
        return 1
    fi
    
    # Start the service using procd
    procd_open_instance
    if [ "$OPERATION_MODE" = "pairs" ] && [ -n "$FILE_PAIRS" ]; then
        procd_set_param command "$PROG" -m -i "$MONITOR_INTERVAL" -F "$FILE_PAIRS"
    else
        procd_set_param command "$PROG" -m -i "$MONITOR_INTERVAL" -f "$FILE_PATTERN" "$SOURCE_DIR" "$OUTPUT_DIR"
    fi
    procd_set_param respawn
    procd_close_instance
    
    echo "MACSet started successfully"
}

# Stop service
stop_service() {
    echo "Stopping MACSet..."
    procd_kill "macset" 2>/dev/null
    rm -f "/tmp/macset_last_modified"
    echo "MACSet stopped"
}

# Show status
status() {
    if procd_running "macset"; then
        echo "MACSet is running"
        echo "Source: $SOURCE_DIR"
        echo "Output: $OUTPUT_DIR"
        echo "Mode: $OPERATION_MODE"
    else
        echo "MACSet is not running"
    fi
}

# Show configuration
config() {
    echo "MACSet Configuration:"
    echo "Source directory: $SOURCE_DIR"
    echo "Output directory: $OUTPUT_DIR"
    echo "Operation mode: $OPERATION_MODE"
    echo "Monitor interval: ${MONITOR_INTERVAL}s"
    
    if [ "$OPERATION_MODE" = "pairs" ]; then
        echo "File pairs: $FILE_PAIRS"
    fi
    
    if [ -f "$CONFIG_FILE" ]; then
        echo "Config file: $CONFIG_FILE"
    else
        echo "Using default configuration"
    fi
}

# Process files once
process() {
    echo "Processing files..."
    
    if [ ! -x "$PROG" ]; then
        echo "ERROR: Processor not found at $PROG"
        return 1
    fi
    
    mkdir -p "$SOURCE_DIR" "$OUTPUT_DIR"
    
    if [ "$OPERATION_MODE" = "pairs" ] && [ -n "$FILE_PAIRS" ]; then
        "$PROG" -p -F "$FILE_PAIRS"
    else
        "$PROG" -p -f "$FILE_PATTERN" "$SOURCE_DIR" "$OUTPUT_DIR"
    fi
    
    echo "Processing completed"
}

# Show usage
usage() {
    cat << EOF
MACSet Service v1.4.0

Usage: $0 {start|stop|restart|status|config|process|usage}

Commands:
    start       Start the MACSet service
    stop        Stop the MACSet service
    restart     Restart the MACSet service
    status      Show service status
    config      Show configuration
    process     Process files once
    usage       Show this help

EOF
}

# Main command dispatcher
case "$1" in
    start)
        start_service
        ;;
    stop)
        stop_service
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    config)
        config
        ;;
    process)
        process
        ;;
    usage|help)
        usage
        ;;
    *)
        usage
        exit 1
        ;;
esac

exit $? 